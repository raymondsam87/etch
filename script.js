// make a container for divs to be create by JS
// using CSS grid wil make styling divs easier, use css to style divs generated by js
//create an event handler for hover over the divs, when hovered, apply black background to div
// create a button to set all divs back to white, clearing the etch
// the button should also prompt the user to for how many squares the new etch a sketch should be, this will set a variable fo a loop
//before squares can re-draw all the squares, a function must delete all existing divs
//create a random colour generator option as well


//adds divs to the canvas
function drawSquares (squares){
    for (let i = 0; i < squares*squares; i++){
        let canvas = document.querySelector('#canvas');
        let makeDiv = document.createElement('div');
        canvas.style.gridTemplateColumns = 'repeat('+squares+',1fr)';
        canvas.style.gridTemplateRows = 'repeat('+squares+',1fr)';
        makeDiv.id = 'etch'+i;
        makeDiv.className = 'canvasDiv';
        canvas.appendChild(makeDiv);
    }
}

//fill div with white once hovered

function fillDiv() {
    let fillColor = RGBColor;
    if (RGBColor === 'random') {
        fillColor = Math.floor(Math.random()*16777215).toString(16);
    }
    this.style.backgroundColor = fillColor;
}

function logDiv(e){
    console.log(e)
}

// remove all divs
function resetEtch(hoverDivs, hoverDiv) {
    hoverDivs.forEach(hoverDiv => hoverDiv.remove());
    }

function askGridSize() {
    let squares = prompt ('What size grid do you want? (under 100 please)', '16');
        if (squares > 100) {
            alert('This is too many squares, sorry. Resetting to 16');
            return squares = 16;
        } else if (squares === null) {
            return squares = 16;
        }
        else {
            return squares;
        }
}

//look out for mouse hover on any div in canvas, if any of the divs are hovered, run the fillblack funciton
function monitorMouse(hoverDivs, hoverDiv, RGBColor) {
    hoverDivs.forEach(hoverDiv => hoverDiv.addEventListener('mouseover', fillDiv));  
}

function resetButton (hoverDivs, hoverDiv) {
    //reset button, detect a mouse click and reset all divs to original state
    const reset = document.querySelector('button#reset');
    reset.addEventListener('click', ()=> {
        resetEtch(hoverDivs, hoverDiv);
        squares = askGridSize();
        drawSquares(squares);
        hoverDivs = document.querySelectorAll('.canvasDiv');
        hoverDiv = document.querySelector('.canvasDiv');
        monitorMouse(hoverDivs, hoverDiv);
    });
}

//change the bg-color of div to random colour
function rgbButton () {
    const rgbButton = document.querySelector('button#RGB');
    rgbButton.addEventListener ('click', ()=> {
        console.log('random');
        RGBColor = 'random';
    });
}

//change the bg-color of div to random colour
function regularButton () {
    const rgbButtons = document.querySelector('button#regular');
    rgbButtons.addEventListener ('click', ()=> {
        RGBColor = 'white';
    });
}

let squares = 16;
let RGBColor = 'white';
drawSquares(squares);
let hoverDivs = document.querySelectorAll('.canvasDiv');
let hoverDiv = document.querySelector('.canvasDiv');
resetButton(hoverDivs, hoverDiv);
rgbButton();
regularButton();
monitorMouse(hoverDivs, hoverDiv);




